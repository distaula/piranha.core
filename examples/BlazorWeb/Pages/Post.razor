@page "/post"
@page "/post/{Id:guid}"
@*@page "/post/{Slug}/{Id:guid}"*@
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization;
@using Piranha.AspNetCore.Models;
@using Piranha.AspNetCore.Services;
@using Microsoft.EntityFrameworkCore;
@using Piranha;
@inherits BlazorWeb.Pages.PiranhaComponentBase<BlazorWeb.Models.BlogPost>
@if (Model != null)
{
    <div class="container body-container body-top">
        <div class="row justify-content-center">
            <div class="col-lg-8 col-md-10 col-xs-12">
                <h1>@Model.Title</h1>

                <p class="small">
                    Published:
                    @if (Model.Published.HasValue)
                    {
                        <text>@Model.Published.Value.ToString("yyyy-MM-dd") in <a href="~/blog/category/@Model.Category.Slug">@Model.Category.Title</a> by <a href="https://twitter.com/tidyui" target="_blank">HÃ¥kan Edling</a></text>
                    }
                    else
                    {
                        <span class="label label-info">Unpublished</span>
                    }
                </p>
            </div>
        </div>

        @if (Model.Hero.PrimaryImage.HasValue)
        {
            <div class="row justify-content-center">
                <div class="col-lg-10 col-md-12">
                    @*<img class="primary-image" src="@Url.Content(Model.Data.Hero.PrimaryImage)">*@
                </div>
            </div>
        }

        <div class="row justify-content-center">
            <div class="col-lg-8 col-md-10 col-xs-12">
                @if (!string.IsNullOrEmpty(Model.Hero.Ingress.Value))
                {
                    <p class="lead">@Model.Hero.Ingress.Value</p>
                }

                @foreach (var block in Model.Blocks)
                {
                    <BlockComponent Block="@block" />
                }
            </div>
        </div>
    </div>
}
@code {
    protected override async Task OnParametersSetAsync()
    {
        if (Id != Guid.Empty && Model == null)
        {
            //Model = await Api.Pages.GetByIdAsync<Models.BlogArchive>(Id);
            //Model.Archive = await Api.Archives.GetByIdAsync(Id, Page, Category, Tag, Year, Month); //, page, category, tag, year, month);
        }

        if (Model != null)
        {
          //  Model.Archive = await Api.Archives.GetByIdAsync(Model.Id, Page, Category, Tag, Year, Month);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Model == null)// && Model.IsStartPage)
        {
            Guid.TryParse(System.Web.HttpUtility.ParseQueryString(new Uri(NavigationManager.Uri).Query)["id"], out Guid id);
            Id = id;
            Model = await ModelLoader.GetPost<BlogPost>(Id, ClaimsPrincipal.Current);
        }
    }
}