@page "/"
@page "/{slug}"
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Authorization;
@using Piranha;
@using Piranha.AspNetCore.Services;
@using Piranha.Models;
@using Piranha.Web;
@inject IApi Api
@inject IModelLoader ModelLoader
@inject AuthenticationStateProvider AuthenticationState
@inject NavigationManager NavigationManager

    <CascadingValue Value="@Slug">
        <CascadingValue Value="@Id">
            <CascadingValue Value="@Model">
                @PiranhaComponentBase.PageTemplate(Model)
                @*@PageTemplate(Model)*@
                    @*<RoutedPage Model="@Model" />*@
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>


@code{
    
    @*protected RenderFragment<RoutedContent> PageTemplate = (model) =>
        {
            var route = (model as RoutedContent)?.Route?.TrimStart('/');
            switch (model)
            {
                case Models.TeaserPage teaser:
                    return @<TeaserPage Model=@teaser />;
                case Models.StandardPage standardPage when route == "page":
                    return @<Page Model="@standardPage" />;
                case Models.StandardPage standardPage when route == "pagewide":
                    return @<PageWide Model="@standardPage" />;
                case Models.BlogArchive blogArchive:
                    return @<Archive Model="@blogArchive" />;
                case Models.BlogPost blogPost:
                    return @<Post Model="@blogPost" />;
            }

            return null;
        };*@

    //private IRouteResponse response;

    protected override async Task OnParametersSetAsync()
    {
        var site = await Api.Sites.GetDefaultAsync();

        var response = await PageRouter.InvokeAsync(Api, $"/{Slug}", site.Id)
        ?? await PostRouter.InvokeAsync(Api, $"/{Slug}", site.Id)
        ?? await ArchiveRouter.InvokeAsync(Api, $"/{Slug}", site.Id)
        ?? await AliasRouter.InvokeAsync(Api, $"/{Slug}", site.Id);

        if (response == null)
            return;

        Id = response.PageId;

        var state = await AuthenticationState.GetAuthenticationStateAsync();

        _route = response.Route.TrimStart('/');

        switch(_route)
        {
            case string teaser when _route.Equals(nameof(TeaserPage), StringComparison.InvariantCultureIgnoreCase):
                Model = await ModelLoader.GetPage<Models.TeaserPage>(response.PageId, state.User);
                break;
            case string page when _route.Equals(nameof(Page), StringComparison.InvariantCultureIgnoreCase):
                Model = await ModelLoader.GetPage<Models.StandardPage>(response.PageId, state.User);
                break;
            case string pagewide when _route.Equals(nameof(PageWide), StringComparison.InvariantCultureIgnoreCase):
                Model = await ModelLoader.GetPage<Models.StandardPage>(response.PageId, state.User);
                break;
            case string archive when _route.Equals(nameof(archive), StringComparison.InvariantCultureIgnoreCase):
                Model = await ModelLoader.GetPage<Models.BlogArchive>(response.PageId, state.User);
                break;
            case string post when _route.Equals("post", StringComparison.InvariantCultureIgnoreCase):
                Model = await ModelLoader.GetPost<Models.BlogPost>(response.PageId, state.User);
                break;

    //case string post when _route.Equals(nameof(Post), StringComparison.InvariantCultureIgnoreCase):
            //    Model = await ModelLoader.GetPost<Models.BlogPost>(response.PageId, state.User, draft);

            //    break;
            default:
                Model = null;
                break;
        }
    }

    private async Task SetContent()
    {


    }

    [Parameter]
    public string Slug {
        get;
        set;
    }

    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public RoutedContent Model { get; set; }

    private string _route;

    protected override async Task OnInitializedAsync()
    {
        Slug = Slug ?? "home";
    }
}