@page "/archive"
@page "/archive/{Id:guid}"
@inherits BlazorWeb.Pages.PiranhaComponentBase<BlazorWeb.Models.BlogArchive>
@using System.Globalization
@using Microsoft.AspNetCore.Authorization;
@using Piranha.AspNetCore.Models;
@using Piranha.AspNetCore.Services;
@using Microsoft.EntityFrameworkCore;
@using Piranha;
@if (Model != null)
{
    @*ViewData["Title"] = Model.Data.Title;

        @Html.DisplayFor(m => m.Data.Hero)*@

    <div class="container body-container">
        <div class="row justify-content-center">
            <div class="col-lg-8 col-md-10 col-xs-12">
                @foreach (var post in Model.Archive.Posts)
                {
                    <article class="archive-item">
                        <header>
                            <h2><a href="@post.Permalink">@post.Title</a></h2>
                        </header>
                        <p class="small">
                            <strong>In</strong><NavLink href="@GetCategoryLink(post)">@post.Category.Title</NavLink>
                            <span class="sep">&#9670;</span>
                            <strong>Tags</strong>
                            @foreach (var tag in post.Tags)
                            {
                                <NavLink href="@GetTagLink(tag)">#@tag.Title</NavLink>
                            }
                            <span class="sep">&#9670;</span>
                            <strong>Published</strong> @post.Published.Value.ToString("yyyy-MM-dd")
                        </p>
                        @*@if (post.Regions.Hero.PrimaryImage.Media != null)
                            {
                                <img src="@Url.Content(post.Regions.Hero.PrimaryImage.Media.PublicUrl)">
                            }
                            @Html.Raw(GetFirstHtmlBlock(post).Body)*@
                        <NavLink class="btn btn-sm btn-default" href="@post.Permalink">Read more</NavLink>
                    </article>
                }
            </div>
        </div>

        @if (Model.Archive.TotalPages > 1)
        {
            <div class="row">
                <div class="col">
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center">
                            <li class="page-item">
                                <a class="page-link" href="@BlogLink(Model)/page/1">
                                    <span aria-hidden="true">&laquo;</span>
                                    <span class="sr-only">Previous</span>
                                </a>
                            </li>
                            <li class="page-item">
                                <a class="page-link" href="@BlogLink(Model)/page/@Math.Max(1, Model.Archive.CurrentPage - 1)">
                                    <span aria-hidden="true">&lsaquo;</span>
                                    <span class="sr-only">Previous</span>
                                </a>
                            </li>
                            @for (var n = 1; n <= Model.Archive.TotalPages; n++)
                            {
                                <li class="page-item @(Model.Archive.CurrentPage == n ? "active" : "")"><a class="page-link" href="@BlogLink(Model)/page/@n">@n</a></li>
                            }
                            <li class="page-item">
                                <a class="page-link" href="@BlogLink(Model)/page/@Math.Min(Model.Archive.TotalPages, Model.Archive.CurrentPage + 1)">
                                    <span aria-hidden="true">&rsaquo;</span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </li>
                            <li class="page-item">
                                <a class="page-link" href="@BlogLink(Model)/page/@Model.Archive.TotalPages">
                                    <span aria-hidden="true">&raquo;</span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        }
    </div>
}

@code
{
    Func<BlogArchive, string> BlogLink = (model) =>
    {
        return model.Permalink
               + (model.Archive.Category != null ? $"/category/{model.Archive.Category.Slug}" : "")
               + (model.Archive.Year.HasValue ? $"/{model.Archive.Year}" : "")
               + (model.Archive.Month.HasValue ? $"/{model.Archive.Month}" : "");
    };

    Func<BlogArchive, string> MonthName = (model) =>
    {
        if (model.Archive.Month.HasValue)
        {
            return new DateTime(2018, model.Archive.Month.Value, 1).ToString("MMMM", CultureInfo.InvariantCulture);
        }
        return "";
    };

    Func<Piranha.Models.DynamicPost, Piranha.Extend.Blocks.HtmlBlock> GetFirstHtmlBlock = (post) =>
    {
        foreach (var block in post.Blocks)
        {
            if (block is Piranha.Extend.Blocks.HtmlBlock)
            {
                return (Piranha.Extend.Blocks.HtmlBlock)block;
            }
        }
        return null;
    };

    [Parameter]
    public int? Year { get; set; }

    [Parameter]
    public int? Month { get; set; }

    [Parameter]
    public int? Page { get; set; }

    [Parameter]
    public Guid? Category { get; set; }

    [Parameter]
    public Guid? Tag { get; set; }

    private string GetCategoryLink(DynamicPost post)
    {
        return $"/blog/category/{post.Category.Slug}";
    }

    private string GetTagLink(Taxonomy tag)
    {
        return $"/blog/tag/{tag.Slug}";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != Guid.Empty && Model == null)
        {
            Model = await Api.Pages.GetByIdAsync<Models.BlogArchive>(Id);
            Model.Archive = await Api.Archives.GetByIdAsync(Id, Page, Category, Tag, Year, Month); //, page, category, tag, year, month);
        }

        if (Model != null)
        {
            Model.Archive = await Api.Archives.GetByIdAsync(Model.Id, Page, Category, Tag, Year, Month);
        }
    }

    protected override async Task OnInitializedAsync()
    {
            //Model = await Api.Pages.GetByIdAsync<Models.BlogArchive>(Id);
        if (Model != null)
        {
            Model.Archive = await Api.Archives.GetByIdAsync(Model.Id, Page, Category, Tag, Year, Month);
            StateHasChanged();
        }
    }
}
